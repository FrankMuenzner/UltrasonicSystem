//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
//      Copyright (C) 2015 Peter Walsh, Milford, NH 03055
//      All Rights Reserved under the MIT license as outlined below.
//
//  FILE
//      Config.h
//
//  SYNOPSIS
//
//      Collect all the PORT/BIT assignments in one file, for ease in managing
//
//  DESCRIPTION
//
//      A system with one or two hardware interface is relatively straightforward to
//        manage, When you have a lot of them, it makes more sense to put everything
//        in one file, so that conflicts are readily apparent.
//
//////////////////////////////////////////////////////////////////////////////////////////
//
//  MIT LICENSE
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of
//    this software and associated documentation files (the "Software"), to deal in
//    the Software without restriction, including without limitation the rights to
//    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
//    of the Software, and to permit persons to whom the Software is furnished to do
//    so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//    all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
//    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
//    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

#ifndef CONFIG_H
#define CONFIG_H

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// EEPROM memory layout
//
#define EEPROM_CURR_VERSION 7


//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
//  PORT USAGE TABLE
//
//      PORTB.5     SPI     SCK
//      PORTB.4     SPI     MISO
//      PORTB.3     SPI     MOSI
//      PORTB.2     SPI     SS
//      PORTB.1     INPUTS  I2
//      PORTB.0     PWM     ICP
//
//      PORTC.7     LEDs    LED1
//      PORTC.6     LEDs    LED2
//      PORTC.5
//      PORTC.4     TUNING  Tuning relay
//      PORTC.3     OUTPUTS O2
//      PORTC.2     OUTPUTS O1
//      PORTC.1     XDUCER  Tuning  sense (AtoD)
//      PORTC.0     ACS712  Current sense (AtoD)
//
//      PORTD.7     SG3525  Chip select
//      PORTD.6     BUZ     Buzzer
//      PORTD.5     INPUTS  I1
//      PORTD.4     AD9833  FSYNC (Chip select)
//      PORTD.3     FreqPot Chip Select
//      PORTD.2     PWMPot  Chip select
//      PORTD.1     UART    TxD
//      PORTD.0     UART    RxD
//
// NOTE: SS must not be used, since a high value will force the SPI out of master mode.
//


//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// ACS712 Hall-effect current monitor
//
#define ACS712_CHANNEL      0           // PortC.0

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// Transducer tuning input
//
#define TUNING_CHANNEL      1           // PortC.1

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// The ports and bits for outputs
//
#define OUTPUT1_PORT        C           // PortC
#define OUTPUT1_BIT         2           // Pin 2

#define OUTPUT2_PORT        C           // PortC
#define OUTPUT2_BIT         3           // Pin 3

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// Tuning relay PortC
//
#define TUNE_RELAY_PORT     C           // PortC
#define TUNE_RELAY_BIT      4           // Pin 4

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// Unused bits in PortC
//
#define UNUSEDC2_PORT       C           // PortC
#define UNUSEDC2_BIT        5           // Pin 5

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// The ports and bits for LEDs
//
#define LED2_PORT           C           // PortC
#define LED2_BIT            6           // Pin 6

#define LED1_PORT           C           // PortC
#define LED1_BIT            7           // Pin 7


//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// UART is fixed in port D
//
//#define TxD_PORT          D
//#define TxD_BIT           0

//#define RxD_PORT          D
//#define RxD_BIT           1

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// PWMPot - 10K ohm MCP4161 on PortD.2
//
#define PWMPot_PORT         D
#define PWMPot_BIT          2

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// FreqPot - 50K ohm MCP4131 on PortD.3
//
#define FreqPot_PORT        D
#define FreqPot_BIT         3

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// AD9833 Sin/Sq/Triangle wave generator
//
#define AD9833_FSYNC_PORT   D
#define AD9833_FSYNC_PIN    4

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// The I1 port
//
#define INPUT_I1_PORT       D           // PortD
#define INPUT_I1_BIT        5           // Pin 5

#define PCIE_I1         PCIE2           // Corresponds to PortD.5 (Datasheet, pg 74)
#define PCMSK_I1        PCMSK2          // Corresponds to PortD.5 (Datasheet, pg 74)
#define PCINT_I1        PCINT21         // Corresponds to PortD.5 (Datasheet, pg 74)
#define INPUT_I1_VECT   PCINT2_vect

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// The port and bit for the buzzer
//
#define BUZZER_PORT         D
#define BUZZER_BIT          6

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// SG3525 PWM chip
//
#define SG3525_CS_PORT      D           // PortD
#define SG3525_CS_BIT       7           // Pin 7


//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// ICP used for PWM on the Arduino is on Timer1, which is PortB.0
//
//#define ICP_PORT          B
//#define ICP_BIT           0


//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// The I2 port
//
#define INPUT_I2_PORT   B               // PortB        // See Config.h
#define INPUT_I2_BIT    1               // Pin 1

#define PCIE_I2         PCIE0           // Corresponds to PortB.1 (Datasheet, pg 74)
#define PCMSK_I2        PCMSK0          // Corresponds to PortB.1 (Datasheet, pg 74)
#define PCINT_I2        PCINT1          // Corresponds to PortB.1 (Datasheet, pg 74)
#define INPUT_I2_VECT   PCINT0_vect


//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// SPI is fixed in port B
//
//#define SPI_PORT    B                   // Port containing MISO, MOSI, &c
//
//#define SS_BIT      2                   // Bits in SPI port
//#define MOSI_BIT    3
//#define MISO_BIT    4
//#define SCK_BIT     5

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//
// Crystals are fixed on PortB
//
//#define X1_PORT           B
//#define X1_BIT            6

//#define X2_PORT           B
//#define X2_BIT            7

//
// End of user configurable options
//
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

#endif  // CONFIG_H - Entire file
